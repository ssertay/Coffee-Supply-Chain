// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../coffeeaccesscontrol/ConsumerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeecore/Ownable.sol";

contract SupplyChain is Ownable, FarmerRole, DistributorRole, RetailerRole, ConsumerRole {
  uint  upc;
  uint  sku;

  mapping (uint => Item) items;
  mapping (uint => string[]) itemsHistory;
  
  enum State 
  { 
    Harvested,  // 0
    Processed,  // 1
    Packed,     // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
  }

  State constant defaultState = State.Harvested;

  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer
    string  originFarmName; // Farmer Name
    string  originFarmInformation;  // Farmer Information
    string  originFarmLatitude; // Farm Latitude
    string  originFarmLongitude;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  event Harvested(uint upc);
  event Processed(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  modifier verifyCaller (address _address) {
    require(msg.sender == _address, "Caller verification failed.");
    _;
  }

  modifier paidEnough(uint _price) { 
    require(msg.value >= _price, "Paid amount is less than the price of the item");
    _;
  }
  
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    payable(items[_upc].consumerID).transfer(amountToReturn);
  }

  modifier harvested(uint _upc) {
    require(items[_upc].itemState == State.Harvested, "Item is not Harvested");
    _;
  }

  modifier processed(uint _upc) {
    require(items[_upc].itemState == State.Processed, "Item is not Processed");
    _;
  }
  
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed, "Item is not Packed");
    _;
  }

  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale, "Item is not For Sale");
    _;
  }

  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold, "Item is not Sold");
    _;
  }
  
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped, "Item is not Shipped");
    _;
  }

  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received, "Item is not Received");
    _;
  }

  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased, "Item is not Purchased");
    _;
  }

  constructor() payable {
    sku = 1;
    upc = 1;
  }

  function kill() public onlyOwner() {
    selfdestruct(payable(owner()));
  }

  function harvestItem(
    uint _upc,
    address _originFarmerID,
    string memory _originFarmName,
    string memory _originFarmInformation,
    string  memory _originFarmLatitude,
    string  memory _originFarmLongitude,
    string  memory _productNotes) public onlyFarmer()
  {
    items[_upc] = Item(
        sku,
        _upc,
        _originFarmerID,
        _originFarmerID,
        _originFarmName,
        _originFarmInformation,
        _originFarmLatitude,
        _originFarmLongitude,
        sku + _upc,
        _productNotes,
        0, 
        defaultState, 
        address(0), 
        address(0), 
        address(0));
    
    itemsHistory[_upc] = ["Harvested"];
    
    sku = sku + 1;

    emit Harvested(_upc);
  }

  function processItem(uint _upc) public harvested(_upc) verifyCaller(items[_upc].ownerID) onlyFarmer()
  {
    items[_upc].itemState = State.Processed;
    emit Processed(upc);
  }

  function packItem(uint _upc) public processed(_upc) verifyCaller(items[_upc].ownerID) onlyFarmer()
  {
    items[_upc].itemState = State.Packed;
    emit Packed(upc);
  }

  function sellItem(uint _upc, uint _price) public packed(_upc) verifyCaller(items[_upc].ownerID) onlyFarmer()
  {
    items[_upc].productPrice = _price;
    items[_upc].itemState = State.ForSale;
    emit ForSale(upc);
  }

  function buyItem(uint _upc) public payable 
                              forSale(_upc)
                              paidEnough(items[_upc].productPrice)
                              checkValue(_upc)
                              onlyDistributor()
    
    {
    items[_upc].itemState = State.Sold;
    items[_upc].distributorID = msg.sender;
    items[_upc].ownerID = msg.sender;
    
    payable(items[_upc].originFarmerID).transfer(items[_upc].productPrice);
    emit Sold(_upc);
  }

  function shipItem(uint _upc) public sold(_upc) verifyCaller(items[_upc].ownerID) onlyDistributor()
  {
    items[_upc].itemState = State.Shipped;
    emit Shipped(_upc);
  }

  function receiveItem(uint _upc) public shipped(_upc) onlyRetailer()
    {
    items[_upc].itemState = State.Received;
    items[_upc].ownerID = msg.sender;
    items[_upc].retailerID = msg.sender;
    emit Received(_upc);
  }

  function purchaseItem(uint _upc) public received(_upc) onlyConsumer()
    {
    items[_upc].itemState = State.Purchased;
    items[_upc].ownerID = msg.sender;
    items[_upc].consumerID = msg.sender;

    emit Purchased(_upc);
  }

  function fetchItemBufferOne(uint _upc) public view returns (
    uint    itemSKU,
    uint    itemUPC,
    address ownerID,
    address originFarmerID,
    string memory originFarmName,
    string memory originFarmInformation,
    string memory originFarmLatitude,
    string memory originFarmLongitude ) 
  {
      itemSKU = items[_upc].sku;
      itemUPC = items[_upc].upc;
      ownerID = items[_upc].ownerID;
      originFarmerID = items[_upc].originFarmerID;
      originFarmName = items[_upc].originFarmName;
      originFarmInformation = items[_upc].originFarmInformation;
      originFarmLatitude = items[_upc].originFarmLatitude;
      originFarmLongitude = items[_upc].originFarmLongitude;
  }

  function fetchItemBufferTwo(uint _upc) public view returns (
    uint    itemSKU,
    uint    itemUPC,
    uint    productID,
    string memory productNotes,
    uint    productPrice,
    uint    itemState,
    address distributorID,
    address retailerID,
    address consumerID )
  {
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    productID = items[_upc].productID;
    productNotes = items[_upc].productNotes;
    productPrice = items[_upc].productPrice;
    itemState = uint(items[_upc].itemState);
    distributorID = items[_upc].distributorID;
    retailerID = items[_upc].retailerID;
    consumerID = items[_upc].consumerID;
  }
}
